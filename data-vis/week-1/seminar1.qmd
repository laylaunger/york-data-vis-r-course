---
title: "Week 1 Seminar: Principles of Data Visualisation"
format:
  revealjs:
    theme: simple
    slide-number: true
    chalkboard: true
    highlight-style: github
---

```{r setup, include=FALSE}
library(kableExtra)
library(tidyverse)
library(showtext)
library(knitr)
library(here)
library(patchwork)
library(colorspace)
options(knitr.kable.NA = '')
knitr::opts_chunk$set(fig.retina = 3)

# Read dino data
dino_data <- read_csv(here("data-vis",  "data", "dino_data.csv"), col_names = c("x","y"))

# Read patient data
patient_data <- read_csv(here("data-vis",  "data", "patient_data_sem1.csv"))
patient_data$Timepoint <- factor(patient_data$Timepoint, levels = c("Pre-Treatment", "Post-Treatment"))

# Set seed for simulating datasets
set.seed(123)

# Generate intervention data
n_per_group <- 50
baseline_mean <- 15
baseline_sd <- 5

# Control group
control_baseline <- rnorm(n_per_group, mean = baseline_mean, sd = baseline_sd)
control_change <- rnorm(n_per_group, mean = 0, sd = 3)
control_post <- control_baseline + control_change

# Treatment group
treatment_baseline <- rnorm(n_per_group, mean = baseline_mean, sd = baseline_sd)
treatment_change <- rnorm(n_per_group, mean = -5, sd = 4)
treatment_post <- treatment_baseline + treatment_change

# Combine
intervention_data <- tibble(
  ID = 1:(2 * n_per_group),
  Group = rep(c("Control", "Treatment"), each = n_per_group),
  Pre = c(control_baseline, treatment_baseline),
  Post = c(control_post, treatment_post)
) %>%
  pivot_longer(cols = c(Pre, Post), names_to = "Time", values_to = "Score") %>%
  mutate(Time = factor(Time, levels = c("Pre", "Post")))


# Generate student help data
years <- 2015:2019
totals <- c(100, 120, 160, 200, 250)

counseling <- c(50, 60, 75, 90, 110)
peer <- round(counseling * c(1.2, 1.45, 1.7, 1.9, 2.1) - (rnorm(length(counseling), mean = 0, sd = 10)),0)
none <- round(counseling * c(0.8, 0.7, 0.6, 0.6, 0.4) - (rnorm(length(counseling), mean = 0, sd = 10)),0)

student_help <- tibble(
  Year = rep(years, times = 3),
  Category = rep(c("Counseling", "Peer Support", "None"), each = length(years)),
  Count = c(counseling, peer, none)
)

student_help$Category <- factor(student_help$Category, levels = c("Counseling", "Peer Support", "None"))

# Generate therapy data
n_patients <- 50

# Create patient IDs
ids_cbt <- paste0("CBT_", seq(1, n_patients))
ids_mbt <- paste0("MBT_", seq(1, n_patients))
ids <- c(ids_cbt, ids_mbt)

# Therapy group assignment
therapy <- c(rep("CBT", n_patients), rep("MBT", n_patients))

# Therapy group assignment
therapy <- c(rep("CBT", n_patients), rep("MBT", n_patients))

# Time points
time_points <- c("Baseline", "MidTreatment", "Post", "FollowUp")

# Generate stress scores
generate_scores <- function(group) {
  if (group == "CBT") {
    baseline <- rnorm(1, 70, 10)
    mid <- baseline - rnorm(1, 15, 5)
    post <- mid - rnorm(1, 10, 5)
    followup <- post + rnorm(1, 5, 3)
  } else { # MBT
    baseline <- rnorm(1, 70, 10)
    mid <- baseline - rnorm(1, 10, 5)
    post <- mid - rnorm(1, 5, 5)
    followup <- post + rnorm(1, 3, 3)
  }
  c(baseline, mid, post, followup)
}

# Create data frame
therapy <- map2_dfr(ids, therapy, ~{
  scores <- generate_scores(.y)
  tibble(ID = .x,
         Therapy = .y,
         Time = time_points,
         Stress = scores)
})

therapy$Time <- factor(therapy$Time, levels = c("Baseline", "MidTreatment", "Post", "FollowUp"))


# Generate base theme for plots
base_theme <- function () { 
  theme_linedraw(base_size=11) %+replace% 
    theme(
      panel.background  = element_blank(),
      plot.background = element_rect(fill = "transparent", color = NA), 
      legend.background = element_rect(fill = "transparent", color = NA),
      legend.key = element_rect(fill = "transparent", color = NA),
      axis.ticks = element_blank(),
      plot.title = element_text(size = 18, hjust = 0, vjust = 0.5, face = "bold", margin = margin(b = 0.2, unit = "cm")),
      plot.subtitle = element_text(size = 12, hjust = 0, vjust = 0.5, margin = margin(b = 0.2, unit = "cm")),
      plot.caption = element_text(size = 7, hjust = 1, face = "italic", margin = margin(t = 0.1, unit = "cm")),
      axis.text.x = element_text(size = 13),
      axis.text.y = element_text(size = 13),
      axis.title = element_text(size = 15),
      legend.title = element_text(size = 15),
      legend.text = element_text(size = 13),
      panel.grid = element_blank()
    )
}

```

## About us

Instructor: Layla Unger

<br>

Students: Introductions

---

## Module objectives

::: incremental
-   Explore and understand datasets by visualising distributions, relationships, and trends.

-   Design clear and comprehensible visualisations that avoid common pitfalls.

-   Communicate findings to diverse audiences through compelling storytelling.

-   Build interactive dashboards that combine multiple visualisations.

-   Apply these skills across your degree and in a wide range of careers.
:::

---

## Module organization

-   Explore

-   Explain

::: notes

To accomplish these objectives, the module will be roughly divided into two parts.

In the first several weeks, we'll discuss using visualizations to EXPLORE data.

So we'll go through the main types of graph you can use to get a sense of the patterns in your data. So the focus here will be more on giving you tools to understand the data for yourself.

Then once you have a toolkit with lots of different kinds of graph, we'll shift the focus to EXPLAINING data. So we'll be seeing how to adapt the tools you've learned to make the patterns clear and compelling to an audience.

:::

---

## Module components

-   Seminars
-   Practicals
-   At-home preparation
-   At-home consolidation exercises
-   Assessment

---

## Accessing the module

-   Module website
-   VLE
-   Communication
-   Extensions
-   Integrity

::: notes 

Go to VLE and wiki

ALSO OPEN PALETTEER AND PRETTY GRAPHS

:::

---

## What matters

-   Wellbeing

::: notes


:::

---

## Onto the goals of visualisation

---

## Why visualise data?

```{r dino-data, echo=FALSE}
# Display using kable
dino_data %>% 
  head(10) %>% 
  kable("html") %>%
  kable_styling(font_size = 24, position = "center", full_width = F) %>%
  row_spec(0, bold = T, color = "white", background = "#bb0000", align = "c")
```

---

## Why visualise data?

::: fragment
```{r dino-preview-1, echo = FALSE}
dino_data %>% 
  summarize(`Mean of x` = mean(x),
            `Mean of y` = mean(y)) %>%  
  kable("html") %>%
  kable_styling(font_size = 24, position = "center", full_width = F) %>%
  row_spec(0, bold = T, color = "white", background = "#bb0000", align = "c")
```
:::

<br>

::: fragment
```{r dino-summary-2, echo = FALSE}
dino_data %>% 
  summarize(`SD of x` = sd(x),
            `SD of y` = sd(y)) %>%  
  kable("html") %>%
  kable_styling(font_size = 24, position = "center", full_width = F) %>%
  row_spec(0, bold = T, color = "white", background = "#bb0000", align = "c")
```
:::

<br>

::: fragment
```{r dino-summary-3, echo = FALSE}
dino_data %>% 
  pivot_longer(x:y, values_to = "value", names_to = "Variable") %>% 
  group_by(Variable) %>% 
  summarize(Min = min(value),
            Max = max(value)) %>% 
  kable("html") %>%
  kable_styling(font_size = 24, position = "center", full_width = F) %>%
  row_spec(0, bold = T, color = "white", background = "#bb0000", align = "c")
```
:::


::: notes

So, why visualize data?

At the start, you've got your pile of data. Lots of observations of maybe some things that have been measured out in the real world or in an experiment. 

Typically there'll be lots of numbers here, maybe some categorical variables etc.

On their own, the raw data don't tell you anything.

NEXT

You can certainly gain some insight from summary statistics. Mean, SD, range.

NEXT


:::

---

## Why visualise data?

```{r dino-graph, echo = FALSE, fig.align = "center", fig.height = 6.5}
dino_data %>% 
  ggplot(aes(x = x, y = y)) + 
  geom_point(color = "#bb0000") +
  labs(title = "Sometimes visualizing data can reveal important details",
       subtitle = "From Alberto Cairo's Datasaurus") +
  base_theme() +
  scale_x_continuous(limits = c(0, 100)) +
  theme(panel.grid.major = element_blank(),
        axis.title = element_blank())
```

---

## Why visualise data?

```{r patient-preview-1, echo=FALSE}
# Display using kable
patient_data %>% 
  head(10) %>% 
  kable("html") %>%
  kable_styling(font_size = 24, position = "center", full_width = F) %>%
  row_spec(0, bold = T, color = "white", background = "#bb0000", align = "c")
```


::: notes

A more real-world example.

:::

---

## Why visualise data?

```{r patient-summary-1, echo = FALSE}
patient_data %>%
  group_by(Timepoint) %>%
  dplyr::summarise(symptom_mean = mean(Symptom_Severity),
                   symptom_sd = sd(Symptom_Severity)) %>%
  kable("html") %>%
  kable_styling(font_size = 24, position = "center", full_width = F) %>%
  row_spec(0, bold = T, color = "white", background = "#bb0000", align = "c")
```



::: notes

Maybe they're different, maybe they're not.

:::

---

## Why visualise data?

```{r patient-graph-1, echo = FALSE, fig.align = "center", fig.height = 6.5}
ggplot(patient_data, aes(x = Timepoint, y = Symptom_Severity)) +
  geom_violin(color = "transparent", fill = rgb(0,0,1,.2)) +
  geom_point() +
  labs(title = "Changes in Depression Symptoms with Treatment",
       y = "Symptom Severity",
       x = "Timepoint") +
  base_theme() +
  coord_cartesian(ylim = c(0, 100)) +
  theme(panel.grid.major = element_blank()) 

```

::: notes

Turn to a visual, and you immediately start seeing more.

This is something called a violin plot, with points added for individual data points [EXPLAIN]

This gives you both the sense that maybe the two groups differ, like the summary statistics.

BUT ALSO we can see outliers.

:::


---

## Why visualise data?

```{r patient-graph-2, echo = FALSE, fig.align = "center", fig.height = 6.5}
ggplot(patient_data, aes(x = Timepoint, y = Symptom_Severity)) +
  geom_violin(color = "transparent", fill = rgb(0,0,1,.2)) +
  geom_point() +
  geom_line(aes(group = Patient)) +
  labs(title = "Changes in Depression Symptoms with Treatment",
       y = "Symptom Severity",
       x = "Timepoint") +
  base_theme() +
  coord_cartesian(ylim = c(0, 100)) +
  theme(panel.grid.major = element_blank())
```

::: notes

We can enhance this further by adding lines to see trends in change over time, from pre to post. 

Now we can see that in this main group of participants, symptom severity mostly goes down over time. 

But those outliers are outliers not just in severity, but in lack of change.

And we can enhance this graph even further to get a sense of WHY those points are outliers.

:::


---

## Why visualise data?

```{r patient-graph-3, echo = FALSE, fig.align = "center", fig.height = 6.5}
ggplot(patient_data, aes(x = Timepoint, y = Symptom_Severity)) +
  geom_violin(color = "transparent", fill = rgb(0,0,1,.2)) +
  geom_point(aes(color = Assessor)) +
  geom_line(aes(group = Patient, color = Assessor)) +
  labs(title = "Changes in Depression Symptoms with Treatment",
       y = "Symptom Severity",
       x = "Timepoint") +
  base_theme() +
  coord_cartesian(ylim = c(0, 100)) +
  theme(panel.grid.major = element_blank())
```

::: notes

So here I've colored the points by the person who assessed the patients. And we can see that the outliers were all assessed by the same person.

Based on personal example.

:::

---

## Why visualise data?

```{r patient-graph-4, echo = FALSE, fig.align = "center", fig.height = 6.5}
ggplot(patient_data[patient_data$Assessor != "D",], aes(x = Timepoint, y = Symptom_Severity)) +
  geom_violin(color = "transparent", fill = rgb(0,0,1,.2)) +
  geom_point(aes(color = Assessor)) +
  geom_line(aes(group = Patient, color = Assessor)) +
  labs(title = "Changes in Depression Symptoms with Treatment",
       y = "Symptom Severity",
       x = "Timepoint") +
  base_theme() +
  coord_cartesian(ylim = c(0, 50)) +
  theme(panel.grid.major = element_blank())
```

::: notes

Finally, now that our exploration with visuals has revealed these outliers, we can do something about it.

We can regraph the data without the outliers. And now a clear trend pops out. 

:::

---

## Why visualise data?

-   To **explore**: find patterns, outliers, structure
-   To **diagnose**: check assumptions, spot problems
-   What else?

::: notes

Explain to others

:::


---

## Why visualise data?

```{r intervention-graph-1, echo = FALSE, fig.align = "center", fig.height = 6.5}
ggplot(intervention_data, aes(x = Time, y = Score, group = ID, color = Group)) +
  geom_line(alpha = 0.35) +
  stat_summary(aes(group = Group, color = Group), fun = mean, geom = "line", size = 1.5) +
  labs(title = "Individual Changes in Depression Symptoms with Treatment",
       y = "Symptom Severity",
       x = "Timepoint") +
  scale_color_manual(values = c("Treatment" = "violetred", "Control" = "blue")) +
  base_theme() +
  theme(panel.grid.major = element_blank())
```

::: notes

Suppose we had a larger dataset from a big study we've run looking at effects of an intervention. 

The quickest way to show our audience the effects of that intervention is probably a visual.

What does this graph tell us?


:::


---

## Why visualise data?


-   To **explore**: find patterns, outliers, structure
-   To **diagnose**: check assumptions, spot problems
-   To **explain**: communicate results to others

---

## What makes a good visualisation?


::: incremental
-   Appropriate for the data
-   Focus attention on key points
-   Readable
-   Appealing
:::


::: notes

Transition - what do I mean by these things?

:::

---

## What makes a good visualisation?

-   Appropriate for the data

```{r help-graph-1, echo = FALSE, fig.align = "center", fig.height = 6.5}
# Blank plot
student_help %>%
  group_by(Year) %>%
  mutate(Proportion = Count / sum(Count)) %>%
  ggplot(aes(x = factor(Year), y = Proportion, fill = Category)) +
  geom_bar(stat = "identity") +
  labs(title = "Changes in Mental Health Support Access Among Students (2015–2019)",
       x = "Year",
       y = "Proportion of Students",
       fill = "Support Type") +
  scale_y_continuous(labels = scales::percent_format()) +
  base_theme() +
  theme(panel.grid.major = element_blank(),
        axis.title.y = element_text(color = "white"),
        axis.text.y = element_text(color = "white"),
        legend.title = element_text(size = 15),
        legend.text = element_text(size = 13)) +
  annotate("rect",
           xmin = -Inf,
           xmax = Inf,
           ymin = -Inf,
           ymax = Inf,
           fill = "white")
```

::: notes

What if we had this situation, wanted to look at change over time. 

We could make different choices at this point - some would really help us see that change over time, others would make it difficult.

:::


---

## What makes a good visualisation?

-   Appropriate for the data

```{r help-graph-2, echo = FALSE, fig.align = "center", fig.height = 6.5}
# Count data - bad
ggplot(student_help, aes(x = Year, y = Count, group = Category)) +
  geom_bar(aes(fill = Category), stat = "identity", position = position_dodge(width = .9)) +
  labs(title = "Changes in Mental Health Support Access Among Students (2015–2019)",
       x = "Year",
       y = "Number of Students",
       fill = "Support Type") +
  base_theme() +
  theme(panel.grid.major = element_blank())
```

::: notes

We might choose to show this using bars.

But you might also be able to tell that the TOTAL NUMBER of students seems to increase.

So it's hard to see here - is peer support getting more students because actually it's getting more popular in comparison to the other options, or just because there are more students? Really can't tell.

:::

---

## What makes a good visualisation?

-   Appropriate for the data

```{r help-graph-3, echo = FALSE, fig.align = "center", fig.height = 6.5}
# Percent data - good
student_help %>%
  group_by(Year) %>%
  mutate(Proportion = Count / sum(Count)) %>%
  ggplot(aes(x = factor(Year), y = Proportion, fill = Category)) +
  geom_bar(stat = "identity") +
  labs(title = "Changes in Mental Health Support Access Among Students (2015–2019)",
       x = "Year",
       y = "Proportion of Students",
       fill = "Support Type") +
  scale_y_continuous(labels = scales::percent_format()) +
  base_theme()
```

::: notes

Instead look at PROPORTIONS.

Flip back and forth.

SO NEED TO CHOOSE A VISUAL THAT IS APPROPRIATE FOR SHOWING KEY PATTERNS.

:::

---

## What makes a good visualisation?

-   Focus attention on key points

```{r therapy-graph-1, echo = FALSE, fig.align = "center", fig.height = 6.5, fig.width = 17}

# Compare good versus bad assignment of variables to aes 
therapy_plot_bad <- ggplot(therapy, aes(x = Therapy, y = Stress, group = Time, color = Time)) +
  stat_summary(fun = mean, geom = "line", position = position_dodge(width = 0.2)) +
  stat_summary(fun = mean, geom = "point", position = position_dodge(width = 0.2)) +
  labs(title = "BAD: X-axis = Therapy Type", y = "Mean Stress Level") +
  base_theme()


therapy_plot_good <- ggplot(therapy, aes(x = Time, y = Stress, group = Therapy, color = Therapy)) +
  stat_summary(fun = mean, geom = "line") +
  stat_summary(fun = mean, geom = "point") +
  labs(title = "GOOD: X-axis = Time", y = "Mean Stress Level") +
  base_theme()


therapy_plot_good + therapy_plot_bad
```

::: notes

Similarly, we also want to design our graph to focus attention on key points.

:::

---

## What makes a good visualisation?

-   Readable

```{r unreadable-graph, echo=FALSE,  fig.align = "center", fig.height = 6.5,}
knitr::include_graphics(here("data-vis","figs","unreadable_graph.png"))

```

::: notes

Example from student work.

:::

---

## What makes a good visualisation?

-   Appealing

```{r palettes, echo=FALSE}
divergingx_palettes(palette = "Temps", plot = TRUE)

```

---

## Up Next

-   Grammar of Graphics

---

## Resources

- [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/)
- [Nature Checklist for Scientific Figures](https://rdcu.be/etvAL)

---
